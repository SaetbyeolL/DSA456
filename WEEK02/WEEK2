# Algorithms analysis
"""
Analysis of algorithms is about measuring the growth of resource consumption as data size increases.  Resources can be anything that has a limited supply.  The top two are time and memory but these are not the only ones.  
"""


# Analysis of Linear Search
"""
template <class TYPE>
int linearSearch(const vector<TYPE>& arr, const TYPE& key){
	int rc=-1;
	for(int i=0; i<arr.size() && rc==-1; i++){
	if(arr[i] == key){
		rc = i;
		}
	}
	return rc;
}
"""


# Analysis of Binary Search
"""
template <class TYPE>
int binarySearch(const vector<TYPE>& arr, const TYPE& key){
	int rc=-1;
	int low=0;
	int high=arr.size()-1;
	int mid;
	while(low<=high && rc==-1){
		mid =(low+high)/2;
		if(key < arr[mid])
			high=mid-1;
		else if(key > arr[mid])
			low=mid+1;
		else
			rc=mid;
	}
	return rc;
}
"""


# How to do an analysis in 5steps
"""
Step 0: It is good to start by putting your code in
Step 1: Establish variables and functions (mathematical ones)
Step 2: Count your operations
Step 3: Establish the Mathematical Expression for T(n)
Step 4: Simplify your Equation
Step 5: State your final result.
"""
